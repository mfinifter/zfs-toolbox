#! /usr/bin/env python2.7

#  This program is free software. It comes without any warranty, to
#  the extent permitted by applicable law. You can redistribute it
#  and/or modify it under the terms of the Do What The Fuck You Want
#  To Public License, Version 2, as published by Sam Hocevar. See
#  http://sam.zoy.org/wtfpl/COPYING for more details.

import argparse
import subprocess
import sys
import os

QUIET = False

def main():
    parser = argparse.ArgumentParser(description='Destroy a set of snapshots, as specified by the arguments.')
    parser.add_argument('-n', '--dry-run', help="don't actually destroy anything.", default=False, action='store_true')
    parser.add_argument('-q', '--quiet', help="don't list snapshots that are to be destroyed", default=False, action='store_true')
    parser.add_argument('--yes', help="don't ask for confirmation before destroying", default=False, action='store_true')
    parser.add_argument('dataset', help='the dataset')
    parser.add_argument('snapshot', help='the name of the snapshot')

    # A group for required command argument.
    group = parser.add_argument_group('command (required)')
    range_group = group.add_mutually_exclusive_group()
    range_group.add_argument('-u', '--upto', help="destroy all snapshots up to and including the named snapshot (and descendant snapshots, if combined with -r); cannot be used with -g", default=False, action='store_true')
    range_group.add_argument('-g', '--range', help="destroy all snapshots from dataset to the specified upper limit of the range; cannot be used with -u", default=False)
    group.add_argument('-r', '--recursive', help="destroy snapshots on all descendant datasets with the same snapshot name", default=False, action='store_true')

    args = vars(parser.parse_args())
    dataset = args['dataset']
    snapshot = args['snapshot']
    dry_run = args['dry_run']
    upto = args['upto']
    snaprange = args['range']
    recursive = args['recursive']
    noconfirm = args['yes']
    quiet = args['quiet']

    global QUIET
    QUIET = quiet

    # We require you to specify -u, -r, or both.
    if not upto and not recursive and not snaprange:
        arg_error(parser, "you must specify a combination of -i, -u, -r, but not -i and -u together.")

    snaps_to_destroy = []
    datasets = []

    # If '-r' was NOT specified, set the list of datasets to just the one, and
    # add the one dataset and its snapshot to the list of snapshots to destroy.
    #
    # If '-r' was specified, set the list of datasets to all descendant datasets
    # (non-snapshot) of the given dataset, and add the listed snapshot of all
    # the descendants to the list of snapshots to destroy.
    if not recursive:
        datasets = [ dataset ]
    else:
        cmd = "/sbin/zfs list -H -r -o name ".split()
        cmd.append(dataset)
        output = exec_in_shell(cmd)
        children = output.split('\n')
        cmd = "/sbin/zfs list -H -r -t snapshot -o name ".split()
        cmd.append(dataset)
        output = exec_in_shell(cmd)
        children_snaps = output.split('\n')

        for child in children:
            try:
                index = children_snaps.index("%s@%s" % (child, snapshot))
                # The prior statement will throw an exception if the snapshot
                # doesn't exist. Thus, if we reach here, store the child as a
                # valid dataset to visit.
                datasets.append(child)
            except ValueError:
                # If such a snapshot does not exist, just move along.
                pass
        
    # If '-u' was specified, for each dataset (that is the named dataset and any
    # descendants, if '-r' was specified), we need to:
    #   - Get the snapshots on the given dataset, up to the named snapshot
    #   - Concatenate those to the list of snapshots to delete
    #   - Rinse and repeat
    if upto:
        for child in datasets:
            cmd = "/sbin/zfs list -H -t snapshot -s creation -o name -d 1".split()
            cmd.append(child)
            output = exec_in_shell(cmd)
            snaps = output.split('\n')
            try:
                index = snaps.index("%s@%s" % (child, snapshot))
                snaps_to_destroy.extend(snaps[0:index + 1])
            except ValueError:
                print("Snapshot %s@%s not found. Exiting." % (dataset, snapshot))
    # If '-g' was specified, for each dataset
    elif snaprange:
        print("--range is not yet implemented")
        sys.exit()
    else:
        for child in datasets:
            snaps_to_destroy.append(child + "@" + snapshot)

    # List snapshots to destroy and prompt user to confirm their destruction
    msg("The following snapshots will be destroyed:")
    for snap in snaps_to_destroy:
        msg("    " + snap)

    choice = 'n'
    if noconfirm:
        choice = 'y'
    else:
        print("Proceed (y/n)?"),
        choice = raw_input().lower()

    if choice == 'y':
        destroy_snapshots(snaps_to_destroy, dry_run)
    else:
        msg("No snapshots destroyed. Exiting.")

def arg_error(parser, msg):
    parser.print_usage()
    print(os.path.basename(__file__) + ": error: " + msg)
    sys.exit()

def msg(message):
    if not QUIET:
        print(message)

def destroy_snapshots(snapshots, dry_run):
    msg("Destroying snapshots.")
    for snap in snapshots:
        destroy_snapshot(snap, dry_run)
    msg("Finished destroying snapshots. Exiting.")

def destroy_snapshot(snapshot, dry_run):
    cmd = "/sbin/zfs destroy".split()
    cmd.append(snapshot)
    msg("Running command: %s" % " ".join(cmd))
    if not dry_run:
        exec_in_shell(cmd)

# Execute a command in the shell. Disregard exit code. Return output.
# You must pass in an *array* of arguments to the shell. This is because if we
# split it here, we might split arguments that have spaces in them but should be
# single arguments.
def exec_in_shell(cmd):
    try:
        return subprocess.check_output(cmd)
    except subprocess.CalledProcessError, e:
        # Non-zero exit code, but we don't really care
        return e.output

if __name__ == '__main__':
    main()

